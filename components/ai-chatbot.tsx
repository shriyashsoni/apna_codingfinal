"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { MessageCircle, X, Send, Bot, User, Minimize2, Maximize2 } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"

interface Message {
  id: string
  content: string
  sender: "user" | "bot"
  timestamp: Date
}

export default function AIChatbot() {
  const [isOpen, setIsOpen] = useState(false)
  const [isMinimized, setIsMinimized] = useState(false)
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      content: "Hi! I'm your AI coding assistant. Ask me anything about programming, career advice, or learning paths!",
      sender: "bot",
      timestamp: new Date(),
    },
  ])
  const [inputMessage, setInputMessage] = useState("")
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const generateAIResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase()

    // React-related questions
    if (message.includes("react") || message.includes("jsx") || message.includes("hooks")) {
      if (message.includes("learn") || message.includes("start") || message.includes("begin")) {
        return `üöÄ **React Learning Path (30 Days)**

**Week 1: Fundamentals**
‚Ä¢ Day 1-3: HTML, CSS, JavaScript ES6+
‚Ä¢ Day 4-7: React basics, JSX, components

**Week 2: Core Concepts**
‚Ä¢ Day 8-10: Props, state, event handling
‚Ä¢ Day 11-14: Hooks (useState, useEffect, useContext)

**Week 3: Advanced Topics**
‚Ä¢ Day 15-18: Custom hooks, useReducer, useMemo
‚Ä¢ Day 19-21: React Router, form handling

**Week 4: Real Projects**
‚Ä¢ Day 22-25: Build a todo app, weather app
‚Ä¢ Day 26-28: Portfolio website
‚Ä¢ Day 29-30: Deploy and optimize

**Resources:**
‚Ä¢ Official React docs
‚Ä¢ FreeCodeCamp React course
‚Ä¢ Build 5+ projects for practice

Ready to start your React journey? üí™`
      }

      if (message.includes("hook") || message.includes("usestate") || message.includes("useeffect")) {
        return `üé£ **React Hooks Mastery Guide**

**Essential Hooks:**
‚Ä¢ **useState**: Manage component state
‚Ä¢ **useEffect**: Handle side effects, API calls
‚Ä¢ **useContext**: Share data across components
‚Ä¢ **useReducer**: Complex state management
‚Ä¢ **useMemo**: Performance optimization
‚Ä¢ **useCallback**: Prevent unnecessary re-renders

**Best Practices:**
‚úÖ Use hooks at the top level only
‚úÖ Custom hooks for reusable logic
‚úÖ Dependency arrays in useEffect
‚úÖ Clean up subscriptions

**Common Patterns:**
‚Ä¢ Data fetching with useEffect
‚Ä¢ Form handling with useState
‚Ä¢ Global state with useContext

Need help with a specific hook? Ask me! üîß`
      }

      return `‚öõÔ∏è **React Development Tips**

React is a powerful library for building UIs! Here are key concepts:

**Core Concepts:**
‚Ä¢ Components (functional vs class)
‚Ä¢ Props and state management
‚Ä¢ Virtual DOM and reconciliation
‚Ä¢ Lifecycle methods vs hooks

**Best Practices:**
‚Ä¢ Keep components small and focused
‚Ä¢ Use TypeScript for better development
‚Ä¢ Implement proper error boundaries
‚Ä¢ Optimize with React.memo and useMemo

**Popular Libraries:**
‚Ä¢ Next.js for full-stack apps
‚Ä¢ React Router for navigation
‚Ä¢ Redux/Zustand for state management
‚Ä¢ Styled-components for styling

What specific React topic would you like to explore? üöÄ`
    }

    // Python-related questions
    if (message.includes("python") || message.includes("django") || message.includes("flask")) {
      if (message.includes("learn") || message.includes("start")) {
        return `üêç **Python Mastery Roadmap**

**Phase 1: Fundamentals (2-3 weeks)**
‚Ä¢ Variables, data types, control structures
‚Ä¢ Functions, modules, file handling
‚Ä¢ OOP concepts: classes, inheritance
‚Ä¢ Error handling and debugging

**Phase 2: Libraries & Frameworks (3-4 weeks)**
‚Ä¢ **Web Development**: Django/Flask
‚Ä¢ **Data Science**: Pandas, NumPy, Matplotlib
‚Ä¢ **Machine Learning**: Scikit-learn, TensorFlow
‚Ä¢ **Automation**: Selenium, Beautiful Soup

**Phase 3: Projects (2-3 weeks)**
‚Ä¢ Build a web app with Django
‚Ä¢ Create data analysis projects
‚Ä¢ Automate daily tasks
‚Ä¢ Contribute to open source

**Career Paths:**
‚Ä¢ Backend Developer
‚Ä¢ Data Scientist
‚Ä¢ ML Engineer
‚Ä¢ DevOps Engineer

Which Python path interests you most? üéØ`
      }

      return `üêç **Python Development Guide**

Python is versatile and beginner-friendly!

**Strengths:**
‚Ä¢ Clean, readable syntax
‚Ä¢ Huge ecosystem of libraries
‚Ä¢ Great for web dev, data science, AI
‚Ä¢ Strong community support

**Popular Frameworks:**
‚Ä¢ **Django**: Full-featured web framework
‚Ä¢ **Flask**: Lightweight web framework
‚Ä¢ **FastAPI**: Modern, fast API development
‚Ä¢ **Pandas**: Data manipulation
‚Ä¢ **TensorFlow/PyTorch**: Machine learning

**Project Ideas:**
‚Ä¢ REST API with FastAPI
‚Ä¢ Data analysis dashboard
‚Ä¢ Web scraper
‚Ä¢ Machine learning model

What Python project are you working on? üíª`
    }

    // JavaScript-related questions
    if (message.includes("javascript") || message.includes("js") || message.includes("node")) {
      return `‚ö° **JavaScript Ecosystem Guide**

**Core JavaScript:**
‚Ä¢ ES6+ features (arrow functions, destructuring)
‚Ä¢ Async/await and Promises
‚Ä¢ DOM manipulation
‚Ä¢ Event handling

**Frontend Frameworks:**
‚Ä¢ React, Vue, Angular
‚Ä¢ State management (Redux, Vuex)
‚Ä¢ Build tools (Webpack, Vite)

**Backend Development:**
‚Ä¢ Node.js and Express
‚Ä¢ Database integration (MongoDB, PostgreSQL)
‚Ä¢ RESTful APIs and GraphQL
‚Ä¢ Authentication and security

**Modern Tools:**
‚Ä¢ TypeScript for type safety
‚Ä¢ Testing with Jest/Cypress
‚Ä¢ Deployment with Vercel/Netlify

**Learning Path:**
1. Master vanilla JavaScript first
2. Learn a frontend framework
3. Build full-stack projects
4. Deploy and share your work

Which JavaScript area needs your focus? üéØ`
    }

    // Career advice
    if (message.includes("career") || message.includes("job") || message.includes("interview")) {
      if (message.includes("interview") || message.includes("prepare")) {
        return `üíº **Coding Interview Preparation**

**Technical Preparation:**
‚Ä¢ **Data Structures**: Arrays, linked lists, trees, graphs
‚Ä¢ **Algorithms**: Sorting, searching, dynamic programming
‚Ä¢ **System Design**: Scalability, databases, caching
‚Ä¢ **Practice Platforms**: LeetCode, HackerRank, CodeSignal

**Behavioral Questions:**
‚Ä¢ "Tell me about yourself"
‚Ä¢ "Why do you want this role?"
‚Ä¢ "Describe a challenging project"
‚Ä¢ "How do you handle conflicts?"

**Interview Process:**
1. **Phone/Video Screening** (30-45 min)
2. **Technical Assessment** (1-2 hours)
3. **On-site/Virtual** (3-5 hours)
4. **Final Round** with leadership

**Pro Tips:**
‚úÖ Practice coding on whiteboard/screen
‚úÖ Think out loud during problem-solving
‚úÖ Ask clarifying questions
‚úÖ Prepare questions about the company

**Timeline**: 2-3 months of consistent practice

Ready to ace your next interview? üöÄ`
      }

      return `üéØ **Tech Career Roadmap**

**Entry Level Positions:**
‚Ä¢ Junior Developer ($50-70k)
‚Ä¢ Frontend/Backend Developer
‚Ä¢ QA Engineer
‚Ä¢ Technical Support

**Mid-Level (2-5 years):**
‚Ä¢ Senior Developer ($80-120k)
‚Ä¢ Full-Stack Engineer
‚Ä¢ DevOps Engineer
‚Ä¢ Product Manager

**Senior Level (5+ years):**
‚Ä¢ Tech Lead ($120-180k)
‚Ä¢ Engineering Manager
‚Ä¢ Solutions Architect
‚Ä¢ Principal Engineer

**Career Growth Tips:**
‚úÖ Build a strong portfolio
‚úÖ Contribute to open source
‚úÖ Network with other developers
‚úÖ Keep learning new technologies
‚úÖ Develop soft skills

**Salary Negotiation:**
‚Ä¢ Research market rates
‚Ä¢ Highlight your achievements
‚Ä¢ Consider total compensation
‚Ä¢ Be prepared to walk away

What's your current career stage? üìà`
    }

    // Hackathon-related questions
    if (message.includes("hackathon") || message.includes("competition")) {
      return `üèÜ **Hackathon Success Strategy**

**Before the Event:**
‚Ä¢ **Team Formation**: 2-4 diverse members
‚Ä¢ **Skill Mix**: Frontend, backend, design, business
‚Ä¢ **Idea Brainstorming**: Solve real problems
‚Ä¢ **Tech Stack**: Use familiar technologies

**During the Hackathon:**
‚Ä¢ **Day 1**: Finalize idea, plan MVP, start coding
‚Ä¢ **Day 2**: Build core features, integrate components
‚Ä¢ **Day 3**: Polish, test, prepare presentation

**Winning Tips:**
‚úÖ Focus on user experience
‚úÖ Solve a real problem
‚úÖ Create a compelling demo
‚úÖ Tell a story in your pitch
‚úÖ Show business potential

**Common Mistakes:**
‚ùå Overcomplicating the solution
‚ùå Poor time management
‚ùå Weak presentation skills
‚ùå Not testing thoroughly

**Popular Hackathon Themes:**
‚Ä¢ AI/ML applications
‚Ä¢ Sustainability solutions
‚Ä¢ Healthcare innovations
‚Ä¢ Fintech products

**Prizes & Benefits:**
‚Ä¢ Cash prizes ($1k-$50k+)
‚Ä¢ Job opportunities
‚Ä¢ Mentorship
‚Ä¢ Network building

Ready to dominate your next hackathon? üöÄ`
    }

    // Learning and debugging help
    if (message.includes("debug") || message.includes("error") || message.includes("bug")) {
      return `üêõ **Debugging Mastery Guide**

**Systematic Debugging Process:**
1. **Reproduce** the error consistently
2. **Isolate** the problem area
3. **Examine** the code logic
4. **Test** potential solutions
5. **Verify** the fix works

**Essential Debugging Tools:**
‚Ä¢ **Browser DevTools**: Console, Network, Elements
‚Ä¢ **IDE Debuggers**: Breakpoints, step-through
‚Ä¢ **Logging**: console.log, print statements
‚Ä¢ **Error Tracking**: Sentry, LogRocket

**Common Error Types:**
‚Ä¢ **Syntax Errors**: Missing brackets, semicolons
‚Ä¢ **Runtime Errors**: Null references, type errors
‚Ä¢ **Logic Errors**: Wrong algorithms, conditions
‚Ä¢ **Performance Issues**: Memory leaks, slow queries

**Pro Debugging Tips:**
‚úÖ Read error messages carefully
‚úÖ Use version control to track changes
‚úÖ Write unit tests to catch bugs early
‚úÖ Rubber duck debugging (explain to someone)
‚úÖ Take breaks when stuck

**Prevention Strategies:**
‚Ä¢ Code reviews
‚Ä¢ Automated testing
‚Ä¢ Type checking (TypeScript)
‚Ä¢ Linting tools

What specific error are you facing? üîç`
    }

    // AI and Machine Learning
    if (message.includes("ai") || message.includes("machine learning") || message.includes("ml")) {
      return `ü§ñ **AI/ML Learning Path**

**Foundation (2-3 months):**
‚Ä¢ **Math**: Linear algebra, statistics, calculus
‚Ä¢ **Programming**: Python, R, SQL
‚Ä¢ **Tools**: Jupyter notebooks, Git

**Core ML Concepts (3-4 months):**
‚Ä¢ **Supervised Learning**: Regression, classification
‚Ä¢ **Unsupervised Learning**: Clustering, dimensionality reduction
‚Ä¢ **Deep Learning**: Neural networks, CNNs, RNNs
‚Ä¢ **Model Evaluation**: Cross-validation, metrics

**Practical Skills (2-3 months):**
‚Ä¢ **Libraries**: Scikit-learn, TensorFlow, PyTorch
‚Ä¢ **Data Processing**: Pandas, NumPy, data cleaning
‚Ä¢ **Visualization**: Matplotlib, Seaborn, Plotly
‚Ä¢ **Deployment**: Flask, Docker, cloud platforms

**Specialization Areas:**
‚Ä¢ **Computer Vision**: Image recognition, object detection
‚Ä¢ **NLP**: Text analysis, chatbots, translation
‚Ä¢ **Recommendation Systems**: Collaborative filtering
‚Ä¢ **Time Series**: Forecasting, anomaly detection

**Project Ideas:**
‚Ä¢ Predict house prices
‚Ä¢ Build a chatbot
‚Ä¢ Image classifier
‚Ä¢ Recommendation engine

**Career Opportunities:**
‚Ä¢ ML Engineer ($120-200k)
‚Ä¢ Data Scientist ($100-180k)
‚Ä¢ AI Researcher ($150-300k)
‚Ä¢ ML Ops Engineer ($130-220k)

Which AI area excites you most? üéØ`
    }

    // General programming questions
    if (message.includes("programming") || message.includes("coding") || message.includes("developer")) {
      return `üíª **Programming Excellence Guide**

**Choose Your Path:**
‚Ä¢ **Frontend**: HTML, CSS, JavaScript, React/Vue
‚Ä¢ **Backend**: Node.js, Python, Java, databases
‚Ä¢ **Mobile**: React Native, Flutter, Swift, Kotlin
‚Ä¢ **Data Science**: Python, R, SQL, machine learning
‚Ä¢ **DevOps**: Docker, Kubernetes, AWS, CI/CD

**Essential Skills:**
‚úÖ Problem-solving mindset
‚úÖ Version control (Git)
‚úÖ Testing and debugging
‚úÖ Code documentation
‚úÖ Continuous learning

**Best Practices:**
‚Ä¢ Write clean, readable code
‚Ä¢ Follow coding standards
‚Ä¢ Use meaningful variable names
‚Ä¢ Comment complex logic
‚Ä¢ Refactor regularly

**Learning Resources:**
‚Ä¢ FreeCodeCamp (free)
‚Ä¢ Codecademy (interactive)
‚Ä¢ YouTube tutorials
‚Ä¢ Official documentation
‚Ä¢ Open source projects

**Build Your Portfolio:**
‚Ä¢ Personal website
‚Ä¢ 3-5 diverse projects
‚Ä¢ GitHub contributions
‚Ä¢ Technical blog posts

**Timeline to Job-Ready:**
‚Ä¢ **Beginner**: 6-12 months
‚Ä¢ **Career Switch**: 3-6 months
‚Ä¢ **Bootcamp**: 3-6 months

What programming area interests you most? üöÄ`
    }

    // Default responses for general questions
    const defaultResponses = [
      `ü§î **Great question!** 

I can help you with:
‚Ä¢ **Programming**: React, Python, JavaScript, and more
‚Ä¢ **Career Advice**: Interview prep, salary negotiation
‚Ä¢ **Learning Paths**: Structured roadmaps for any tech
‚Ä¢ **Debugging**: Step-by-step problem solving
‚Ä¢ **Hackathons**: Winning strategies and tips
‚Ä¢ **AI/ML**: Machine learning fundamentals

What specific topic would you like to explore? üí°`,

      `üí° **I'm here to help!**

As your AI coding mentor, I can assist with:
‚Ä¢ Technical concepts and explanations
‚Ä¢ Project ideas and implementation
‚Ä¢ Career guidance and growth
‚Ä¢ Learning resources and roadmaps
‚Ä¢ Best practices and code reviews

Try asking me something like:
‚Ä¢ "How do I learn React in 30 days?"
‚Ä¢ "Help me prepare for coding interviews"
‚Ä¢ "What's the best Python learning path?"
‚Ä¢ "How to win hackathons?"

What would you like to know? üöÄ`,

      `üéØ **Let me help you level up!**

I specialize in:
‚Ä¢ **Web Development**: Frontend, backend, full-stack
‚Ä¢ **Programming Languages**: JavaScript, Python, Java, C++
‚Ä¢ **Frameworks**: React, Node.js, Django, Flask
‚Ä¢ **Career Development**: Job search, interviews, growth
‚Ä¢ **Project Guidance**: From idea to deployment

Ask me anything about coding, career, or learning! 

What's your current challenge? üí™`,
    ]

    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)]
  }

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputMessage,
      sender: "user",
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInputMessage("")
    setIsTyping(true)

    // Simulate AI thinking time
    setTimeout(
      () => {
        const aiResponse: Message = {
          id: (Date.now() + 1).toString(),
          content: generateAIResponse(inputMessage),
          sender: "bot",
          timestamp: new Date(),
        }

        setMessages((prev) => [...prev, aiResponse])
        setIsTyping(false)
      },
      1000 + Math.random() * 2000,
    ) // 1-3 seconds delay
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  if (!isOpen) {
    return (
      <div className="fixed bottom-6 right-6 z-50">
        <Button
          onClick={() => setIsOpen(true)}
          data-chatbot-trigger
          className="bg-yellow-400 hover:bg-yellow-500 text-black rounded-full w-14 h-14 shadow-lg hover:shadow-xl transition-all duration-300 animate-pulse"
        >
          <MessageCircle className="w-6 h-6" />
        </Button>
      </div>
    )
  }

  return (
    <div className="fixed bottom-6 right-6 z-50">
      <Card
        className={`bg-gray-900 border-gray-700 shadow-2xl transition-all duration-300 ${
          isMinimized ? "w-80 h-16" : "w-96 h-[500px]"
        }`}
      >
        <CardHeader className="flex flex-row items-center justify-between p-4 bg-yellow-400 text-black rounded-t-lg">
          <div className="flex items-center space-x-2">
            <Bot className="w-5 h-5" />
            <CardTitle className="text-sm font-semibold">AI Coding Assistant</CardTitle>
          </div>
          <div className="flex items-center space-x-1">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsMinimized(!isMinimized)}
              className="text-black hover:bg-yellow-500 p-1 h-auto"
            >
              {isMinimized ? <Maximize2 className="w-4 h-4" /> : <Minimize2 className="w-4 h-4" />}
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsOpen(false)}
              className="text-black hover:bg-yellow-500 p-1 h-auto"
            >
              <X className="w-4 h-4" />
            </Button>
          </div>
        </CardHeader>

        {!isMinimized && (
          <CardContent className="flex flex-col h-[420px] p-0">
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {messages.map((message) => (
                <div key={message.id} className={`flex ${message.sender === "user" ? "justify-end" : "justify-start"}`}>
                  <div
                    className={`max-w-[80%] p-3 rounded-lg ${
                      message.sender === "user"
                        ? "bg-yellow-400 text-black"
                        : "bg-gray-800 text-white border border-gray-700"
                    }`}
                  >
                    <div className="flex items-start space-x-2">
                      {message.sender === "bot" && <Bot className="w-4 h-4 mt-1 text-yellow-400 flex-shrink-0" />}
                      {message.sender === "user" && <User className="w-4 h-4 mt-1 flex-shrink-0" />}
                      <div className="text-sm whitespace-pre-wrap">{message.content}</div>
                    </div>
                  </div>
                </div>
              ))}

              {isTyping && (
                <div className="flex justify-start">
                  <div className="bg-gray-800 text-white border border-gray-700 p-3 rounded-lg">
                    <div className="flex items-center space-x-2">
                      <Bot className="w-4 h-4 text-yellow-400" />
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-yellow-400 rounded-full animate-bounce"></div>
                        <div
                          className="w-2 h-2 bg-yellow-400 rounded-full animate-bounce"
                          style={{ animationDelay: "0.1s" }}
                        ></div>
                        <div
                          className="w-2 h-2 bg-yellow-400 rounded-full animate-bounce"
                          style={{ animationDelay: "0.2s" }}
                        ></div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              <div ref={messagesEndRef} />
            </div>

            <div className="p-4 border-t border-gray-700">
              <div className="flex space-x-2">
                <Input
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Ask me about coding, career, or learning..."
                  className="bg-gray-800 border-gray-700 text-white placeholder-gray-400 focus:border-yellow-400"
                />
                <Button
                  onClick={handleSendMessage}
                  disabled={!inputMessage.trim() || isTyping}
                  className="bg-yellow-400 hover:bg-yellow-500 text-black"
                >
                  <Send className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </CardContent>
        )}
      </Card>
    </div>
  )
}
